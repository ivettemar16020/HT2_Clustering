library(foreign)
dataset16 = read.spss(file.choose(), to.data.frame=TRUE)
dataset17 = read.spss(file.choose(), to.data.frame=TRUE)
View(dataset16)
View(dataset17)
#Para obtener las graficas de codo
data <- (movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year)
#Para obtener las graficas de codo
data <- movies[movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year]
#Load data
movies <- read.csv("tmdb-movies.csv")
setwd("~/UVG/VII Semestre/Data Mining/HT2_Clustering")
#Load data
movies <- read.csv("tmdb-movies.csv")
#Para obtener las graficas de codo
data <- movies[movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year]
#Para obtener las graficas de codo
data <- subset(movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year)
?c
#Para obtener las graficas de codo
data <- c(movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year)
#var <-  (columnas -1 ) * suma(varianza de todas las columnas)
data
library(dplyr)
#Para obtener las graficas de codo
data <- select(movies$popularity, movies$budget, movies$revenue, movies$runtime, movies$vote_count, movies$vote_average, movies$release_year)
#Para obtener las graficas de codo
data <- select(movies, popularity, budget, revenue, runtime, vote_count, vote_average, release_year)
View(dataset16)
View(data)
#Para obtener las graficas de codo
data <- select(movies, popularity, budget, revenue, runtime, vote_count, vote_average, release_year)
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:10)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Para obtener las graficas de codo
data <- select(movies, popularity, budget, revenue, runtime, vote_count, release_year)
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:10)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Para obtener las graficas de codo
data <- select(movies, popularity, budget, revenue, runtime, vote_count, release_year)
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:10)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Otro Metodo
nb <- NbClust(data, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
install.packages(NbClust)
install.packages(NbClust)
library(NbClust) #Para determinar el no de clusters optimos
install.packages(NbClust)
library(cluster)
library(NbClust) #Para determinar el no de clusters optimos
install.packages(NbClust)
devtools::install_github(...)
install.packages(NbClust)
install.packages(NbClust)
#ke
for (i in 1:2) {
#
# Estimate optimal cluster count and perform K-means with it.
#
gap <- clusGap(scaled_data, kmeans, K.max=10, B=500)
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
fit <- kmeans(scaled_data, k)
#
# Plot the results.
#
pch <- ifelse(fit$cluster==1,24,16); col <- ifelse(fit$cluster==1,"Red", "Black")
plot(scaled_data, asp=1, main=title, pch=pch, col=col)
plot(gap, main=paste("Gap stats,", title))
abline(v=k, lty=3, lwd=2, col="Blue")
#
# Prepare for the next step.
#
xy <- apply(scaled_data, 2, scale)
title <- "Standardized data"
}
library(dplyr)
library(cluster)
library(NbClust) #Para determinar el no de clusters optimos
library(fpc)
library(mclust)
#Cargando data
movies <- read.csv("tmdb-movies.csv")
#Para obtener las graficas de codo
data <- select(movies, popularity, budget, revenue, runtime, vote_count, release_year)
#transformando data
data = as.data.frame(unclass(data))
# Eliminando todos los NAs
myData = na.omit(data)
#escalar y centrar data
scaled_data = as.matrix(scale(myData))
#ke
for (i in 1:2) {
#
# Estimate optimal cluster count and perform K-means with it.
#
gap <- clusGap(scaled_data, kmeans, K.max=10, B=500)
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
fit <- kmeans(scaled_data, k)
#
# Plot the results.
#
pch <- ifelse(fit$cluster==1,24,16); col <- ifelse(fit$cluster==1,"Red", "Black")
plot(scaled_data, asp=1, main=title, pch=pch, col=col)
plot(gap, main=paste("Gap stats,", title))
abline(v=k, lty=3, lwd=2, col="Blue")
#
# Prepare for the next step.
#
xy <- apply(scaled_data, 2, scale)
title <- "Standardized data"
}
#Otro método más
for (i in 1:2) {
#
# Estimate optimal cluster count and perform K-means with it.
#
gap <- clusGap(scaled_data, kmeans, K.max=10, B=500)
k <- maxSE(gap$Tab[, "gap"], gap$Tab[, "SE.sim"], method="Tibs2001SEmax")
fit <- kmeans(scaled_data, k)
#
# Plot the results.
#
pch <- ifelse(fit$cluster==1,24,16); col <- ifelse(fit$cluster==1,"Red", "Black")
plot(scaled_data, asp=1, main=title, pch=pch, col=col)
plot(gap, main=paste("Gap stats,", title))
abline(v=k, lty=3, lwd=2, col="Blue")
#
# Prepare for the next step.
#
scaled_data <- apply(scaled_data, 2, scale)
title <- "Standardized data"
}
#1.- KMeans
km<-kmeans(scaled_data,2)
datos$grupo<-km$cluster
#1.- KMeans
km<-kmeans(scaled_data,2)
scaled_data$grupo<-km$cluster
g1<- scaled_data[scaled_data$grupo==1,]
g1<- scaled_data[scaled_data$grupo==1,]
#1.- KMeans
km<-kmeans(scaled_data,2)
km
scaled_data$grupo<-km$cluster
scaled_data$grupo
g1<- scaled_data[scaled_data$grupo==1,]
g1<- scaled_data[scaled_data$grupo==1]
prop.table(table(g1))*100
g1
summary(g1)
plotcluster(scaled_data,km$cluster) #grafica la ubicaciÃ³n de los clusters
scaled_data$grupo<-km$cluster
plotcluster(scaled_data,km$cluster) #grafica la ubicaciÃ³n de los clusters
?kmeans
#1.- KMeans
km<-kmeans(scaled_data,2)
library(ggmap)
install.packages("ggmap")
library(ggmap)
data14$Borough <- as.factor(km$cluster)
scaled_data$grupo<-as.factor(km$cluster)
scaled_data$grupo
plotcluster(scaled_data,km$cluster) #grafica la ubicaciÃ³n de los clusters
plotcluster(scaled_data[,1:7],km$cluster) #grafica la ubicaciÃ³n de los clusters
plotcluster(scaled_data[,1:6],km$cluster) #grafica la ubicaciÃ³n de los clusters
plotcluster(scaled_data[,1:5],km$cluster) #grafica la ubicaciÃ³n de los clusters
plotcluster(scaled_data[,1:4],km$cluster) #grafica la ubicaciÃ³n de los clusters
scaled_data$grupo<-as.factor(km$cluster)
NYCMap <- get_map("New York", zoom = 10)
ggmap(NYCMap) + geom_point(aes(x = Lon[], y = Lat[], colour = as.factor(grupo)),data = scaled_data) +
ggtitle("NYC Boroughs using KMean")
#1.- KMeans
km<-kmeans(scaled_data,2)
#1.- KMeans
km<-kmeans(scaled_data,2)
View(scaled_data)
scaled_data$grupo<-as.factor(km$cluster)
View(scaled_data)
#1.- KMeans
km<-kmeans(myData,2)
plotcluster(myData,km$cluster)
#1.- KMeans
km<-kmeans(scaled_data,2)
?plotcluster
plotcluster(myData,km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
plotcluster(myData,km$cluster,color=TRUE, shade=TRUE, labels=2, lines=0)
?plotcluster
plotcluster(myData,km$cluster,color=TRUE, shade=TRUE, xlab="Component 1", ylab = "Component 2" , lines=0)
plotcluster(myData,km$cluster,color=TRUE, shade=TRUE, xlab="Component 1", ylab = "Component 2" , lines=0, main = "K Means")
clusplot(myData,km$cluster, color=TRUE, shade=TRUE, xlab="Component 1", ylab = "Component 2" , lines=0, main = "K Means")
#Clustering jerarquico
hc<-hclust(dist(myData)) #Genera el clustering jerarquico de los datos
plot(hc) #Genera el dendograma
rect.hclust(hc,k=2) #Dibuja el corte de los grupos en el grÃ¡fico
groups<-cutree(hc,k=2) #corta el dendograma, determinando el grupo de cada fila
datos$gruposHC<-groups
myData$gruposHC<-groups
g1HC<-myData[myData$gruposHC==1,]
g2HC<-myData[myData$gruposHC==2,]
g1HC
#Fuzzy C-Means
fcm<-cmeans(myData,2)
myData$FCGrupos<-fcm$cluster
library(e1071)#para cmeans
install.packages("e1071")
library(e1071)#para cmeans
#Fuzzy C-Means
fcm<-cmeans(myData,2)
myData$FCGrupos<-fcm$cluster
myData$FCGrupos<-fcm$cluster
myData<-cbind(myData,fcm$membership)
myData
# Membership coefficient
head(fcm$membership)
library(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(fcm$membership, is.corr = FALSE)
corrplot(fcm$membership, is.corr = FALSE)
fcm$cluster
library(factoextra)
install.packages("factorextra")
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_cluster(list(data = df, cluster=fcm$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
fviz_cluster(list(myData = df, cluster=fcm$cluster),
ellipse.type = "norm",
ellipse.level = 0.68,
palette = "jco",
ggtheme = theme_minimal())
corrplot(fcm$membership, is.corr = FALSE, main = "Fuzzy C-Means (corr)")
?corrplot
corrplot(fcm$membership, is.corr = FALSE, main = "Fuzzy C-Means (correlation)")
#SILUETAS
#Metodo de la silueta para las k-medias
silkm<-silhouette(km$cluster,dist(myData))
mean(silkm[,2])
#Metodo de la silueta para clustering jerÃ¡rquico
silch<-silhouette(groups,dist(myData))
mean(silch[,2])
mean(silch[,2]) #1.999724
#Metodo de la silueta para fuzzy cmeans
silfcm<-silhouette(fcm$cluster,dist(myData))
mean(silfcm[,2]) #
#Clustering jerarquico
hc<-hclust(dist(scaled_data)) #Genera el clustering jerarquico de los datos
scaled_data
#SILUETAS
#Metodo de la silueta para las k-medias
silkm<-silhouette(km$cluster,dist(scaled_data))
#SILUETAS
#Metodo de la silueta para las k-medias
silkm<-silhouette(km$cluster,dist(scaled_data))
#SILUETAS
#Metodo de la silueta para las k-medias
silkm<-silhouette(km$cluster,dist(myData))
myData
#transformando data
data = as.data.frame(unclass(data))
summary(data)
# Eliminando todos los NAs
myData = na.omit(data)
#SILUETAS
#Metodo de la silueta para las k-medias
silkm<-silhouette(km$cluster,dist(myData))
mean(silkm[,2]) #1.038285
#Metodo de la silueta para clustering jerarquico
silch<-silhouette(groups,dist(myData))
mean(silch[,2]) #1.999724
#Metodo de la silueta para fuzzy cmeans
silfcm<-silhouette(fcm$cluster,dist(myData))
mean(silfcm[,2]) #1.046843
myData
mean(silkm[,2]) #1.038285
mean(silch[,2]) #1.999724
mean(silfcm[,2]) #1.046843
plot(silkm, col=1:8, border=NA)
plot(silch, col=1:8, border=NA)
plot(silfcm, col=1:8, border=NA)
